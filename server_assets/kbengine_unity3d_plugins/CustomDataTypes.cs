/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

namespace KBEngine
{
	using UnityEngine;
	using System;
	using System.Collections;
	using System.Collections.Generic;



	public class DATATYPE_ENTITY_FORBID_COUNTER : DATATYPE_BASE
	{
		public ENTITY_FORBID_COUNTER createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			ENTITY_FORBID_COUNTER datas = new ENTITY_FORBID_COUNTER();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt8());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, ENTITY_FORBID_COUNTER v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt8(v[i]);
			};
		}
	}



	public class DATATYPE_ENTITYID_LIST : DATATYPE_BASE
	{
		public ENTITYID_LIST createFromStreamEx(MemoryStream stream)
		{
			UInt32 size = stream.readUint32();
			ENTITYID_LIST datas = new ENTITYID_LIST();

			while(size > 0)
			{
				--size;
				datas.Add(stream.readInt32());
			};

			return datas;
		}

		public void addToStreamEx(Bundle stream, ENTITYID_LIST v)
		{
			stream.writeUint32((UInt32)v.Count);
			for(int i=0; i<v.Count; ++i)
			{
				stream.writeInt32(v[i]);
			};
		}
	}



	public class DATATYPE_AVATAR_DATA : DATATYPE_BASE
	{
		public AVATAR_DATA createFromStreamEx(MemoryStream stream)
		{
			AVATAR_DATA datas = new AVATAR_DATA();
			datas.param1 = stream.readInt8();
			datas.param2 = stream.readBlob();
			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_DATA v)
		{
			stream.writeInt8(v.param1);
			stream.writeBlob(v.param2);
		}
	}



	public class DATATYPE_AVATAR_INFOS : DATATYPE_BASE
	{
		private DATATYPE_AVATAR_DATA data_DataType = new DATATYPE_AVATAR_DATA();
		public AVATAR_INFOS createFromStreamEx(MemoryStream stream)
		{
			AVATAR_INFOS datas = new AVATAR_INFOS();
			datas.dbid = stream.readUint64();
			datas.name = stream.readUnicode();
			datas.raceType = stream.readUint8();
			datas.level = stream.readUint16();
			datas.data = data_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_INFOS v)
		{
			stream.writeUint64(v.dbid);
			stream.writeUnicode(v.name);
			stream.writeUint8(v.raceType);
			stream.writeUint16(v.level);
			data_DataType.addToStreamEx(stream, v.data);
		}
	}



	public class DATATYPE_AVATAR_INFOS_LIST : DATATYPE_BASE
	{
		private DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray values_DataType = new DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray();

		public class DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray : DATATYPE_BASE
		{
			private DATATYPE_AVATAR_INFOS itemType = new DATATYPE_AVATAR_INFOS();

			public List<AVATAR_INFOS> createFromStreamEx(MemoryStream stream)
			{
				UInt32 size = stream.readUint32();
				List<AVATAR_INFOS> datas = new List<AVATAR_INFOS>();

				while(size > 0)
				{
					--size;
					datas.Add(itemType.createFromStreamEx(stream));
				};

				return datas;
			}

			public void addToStreamEx(Bundle stream, List<AVATAR_INFOS> v)
			{
				stream.writeUint32((UInt32)v.Count);
				for(int i=0; i<v.Count; ++i)
				{
					itemType.addToStreamEx(stream, v[i]);
				};
			}
		}

		public AVATAR_INFOS_LIST createFromStreamEx(MemoryStream stream)
		{
			AVATAR_INFOS_LIST datas = new AVATAR_INFOS_LIST();
			datas.values = values_DataType.createFromStreamEx(stream);
			return datas;
		}

		public void addToStreamEx(Bundle stream, AVATAR_INFOS_LIST v)
		{
			values_DataType.addToStreamEx(stream, v.values);
		}
	}


}