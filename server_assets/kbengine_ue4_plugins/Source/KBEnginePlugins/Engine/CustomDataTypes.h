/*
	Generated by KBEngine!
	Please do not modify this file!
	tools = kbcmd
*/

#pragma once
#include "KBECommon.h"
#include "KBETypes.h"
#include "MemoryStream.h"
#include "Bundle.h"
#include "DataTypes.h"
namespace KBEngine
{


class KBENGINEPLUGINS_API DATATYPE_ENTITY_FORBID_COUNTER : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ENTITY_FORBID_COUNTER& datas);
	void addToStreamEx(Bundle& stream, const ENTITY_FORBID_COUNTER& v);
};


class KBENGINEPLUGINS_API DATATYPE_ENTITYID_LIST : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, ENTITYID_LIST& datas);
	void addToStreamEx(Bundle& stream, const ENTITYID_LIST& v);
};


class KBENGINEPLUGINS_API DATATYPE_AVATAR_DATA : DATATYPE_BASE
{
public:
	void createFromStreamEx(MemoryStream& stream, AVATAR_DATA& datas);
	void addToStreamEx(Bundle& stream, const AVATAR_DATA& v);
};


class KBENGINEPLUGINS_API DATATYPE_AVATAR_INFOS : DATATYPE_BASE
{
public:
	DATATYPE_AVATAR_DATA data_DataType;
	void createFromStreamEx(MemoryStream& stream, AVATAR_INFOS& datas);
	void addToStreamEx(Bundle& stream, const AVATAR_INFOS& v);
};


class KBENGINEPLUGINS_API DATATYPE_AVATAR_INFOS_LIST : DATATYPE_BASE
{
public:
	class KBENGINEPLUGINS_API DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray : public DATATYPE_BASE
	{
	public:
		DATATYPE_AVATAR_INFOS itemType;

		void createFromStreamEx(MemoryStream& stream, TArray<AVATAR_INFOS>& datas)
		{
			uint32 size = stream.readUint32();
			while(size > 0)
			{
				--size;
				itemType.createFromStreamEx(stream, datas.EmplaceAt_GetRef(datas.Num()));
			};

		}

		void addToStreamEx(Bundle& stream, const TArray<AVATAR_INFOS>& v)
		{
			stream.writeUint32((uint32)v.Num());
			for(int i=0; i<v.Num(); ++i)
			{
				itemType.addToStreamEx(stream, v[i]);
			};
		}
	};

	DATATYPE__AVATAR_INFOS_LIST_values_ArrayType_ChildArray values_DataType;

	void createFromStreamEx(MemoryStream& stream, AVATAR_INFOS_LIST& datas);
	void addToStreamEx(Bundle& stream, const AVATAR_INFOS_LIST& v);
};


}